"use client";

import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Card,
  CardHeader,
  CardTitle,
  CardContent,
  CardDescription,
} from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { cn } from "@/lib/utils";
import { useState, useTransition } from "react";
import { useRouter } from "next/navigation";
import { toast } from "sonner";

// üëâ N·∫øu ƒë√£ t·∫°o h√†m g·ª≠i OTP trong action.ts th√¨ import ·ªü ƒë√¢y
import { sendOtp } from "@/app/api/auth/signupotp/action"; // Gi·∫£ s·ª≠ b·∫°n ƒë√£ t·∫°o API client-side

// Schema ch·ªâ c·∫ßn validate email
const signupSchema = z.object({
  email: z.string().email("Email kh√¥ng h·ª£p l·ªá"),
});

type SignUpFormValues = z.infer<typeof signupSchema>;

export function SignUpFormOtp({
  className,
  ...props
}: React.ComponentProps<"div">) {
  const form = useForm<SignUpFormValues>({
    resolver: zodResolver(signupSchema),
    defaultValues: {
      email: "",
    },
  });

  const [isPending, startTransition] = useTransition();
  const [message, setMessage] = useState("");
  const router = useRouter();

  const onSubmit = (data: SignUpFormValues) => {
    setMessage("");

    startTransition(async () => {
      try {
        // üëâ G·ªçi API g·ª≠i OTP
        await sendOtp(data.email);

        toast.success("M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email!");
        setMessage("M√£ OTP ƒë√£ g·ª≠i th√†nh c√¥ng");

        // üëâ C√≥ th·ªÉ chuy·ªÉn h∆∞·ªõng sang b∆∞·ªõc nh·∫≠p m√£ OTP
        router.push(`/sign-up?email=${encodeURIComponent(data.email)}`);
        form.reset();
      } catch (error: unknown) {
        if (error instanceof Error) {
          toast.error(error.message);
          setMessage(error.message);
        } else {
          toast.error("G·ª≠i OTP th·∫•t b·∫°i!");
          setMessage("C√≥ l·ªói x·∫£y ra khi g·ª≠i OTP");
        }
      }
    });
  };

  return (
    <div className={cn("flex flex-col gap-6", className)} {...props}>
      <Card>
        <CardHeader className="text-center">
          <CardTitle className="text-xl">T·∫°o t√†i kho·∫£n</CardTitle>
          <CardDescription>Nh·∫≠p email ƒë·ªÉ nh·∫≠n m√£ OTP</CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={form.handleSubmit(onSubmit)} className="grid gap-4">
            <div className="grid gap-3">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                type="email"
                placeholder="you@example.com"
                {...form.register("email")}
              />
              {form.formState.errors.email && (
                <p className="text-sm text-red-500">
                  {form.formState.errors.email.message}
                </p>
              )}
            </div>

            <Button type="submit" className="w-full" disabled={isPending}>
              {isPending ? "ƒêang g·ª≠i m√£ OTP..." : "G·ª≠i m√£ OTP"}
            </Button>

            {message && <p className="text-center text-green-600">{message}</p>}
          </form>
        </CardContent>
      </Card>
    </div>
  );
}
